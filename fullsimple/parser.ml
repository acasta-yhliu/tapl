type token =
  | IMPORT of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | INERT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | TYPE of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | NAT of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 78 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* IMPORT *);
  258 (* AS *);
  259 (* USTRING *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* TRUE *);
  264 (* FALSE *);
  265 (* BOOL *);
  266 (* CASE *);
  267 (* OF *);
  268 (* UNIT *);
  269 (* UUNIT *);
  270 (* TIMESFLOAT *);
  271 (* UFLOAT *);
  272 (* LET *);
  273 (* IN *);
  274 (* INERT *);
  275 (* LAMBDA *);
  276 (* FIX *);
  277 (* LETREC *);
  278 (* TYPE *);
  279 (* SUCC *);
  280 (* PRED *);
  281 (* ISZERO *);
  282 (* NAT *);
  283 (* UCID *);
  284 (* LCID *);
  285 (* INTV *);
  286 (* FLOATV *);
  287 (* STRINGV *);
  288 (* APOSTROPHE *);
  289 (* DQUOTE *);
  290 (* ARROW *);
  291 (* BANG *);
  292 (* BARGT *);
  293 (* BARRCURLY *);
  294 (* BARRSQUARE *);
  295 (* COLON *);
  296 (* COLONCOLON *);
  297 (* COLONEQ *);
  298 (* COLONHASH *);
  299 (* COMMA *);
  300 (* DARROW *);
  301 (* DDARROW *);
  302 (* DOT *);
    0 (* EOF *);
  303 (* EQ *);
  304 (* EQEQ *);
  305 (* EXISTS *);
  306 (* GT *);
  307 (* HASH *);
  308 (* LCURLY *);
  309 (* LCURLYBAR *);
  310 (* LEFTARROW *);
  311 (* LPAREN *);
  312 (* LSQUARE *);
  313 (* LSQUAREBAR *);
  314 (* LT *);
  315 (* RCURLY *);
  316 (* RPAREN *);
  317 (* RSQUARE *);
  318 (* SEMI *);
  319 (* SLASH *);
  320 (* STAR *);
  321 (* TRIANGLE *);
  322 (* USCORE *);
  323 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\004\000\004\000\
\006\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\010\000\010\000\009\000\009\000\012\000\012\000\
\013\000\013\000\014\000\014\000\014\000\007\000\007\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\017\000\017\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\016\000\016\000\019\000\018\000\018\000\
\020\000\020\000\021\000\021\000\005\000\005\000\000\000"

let yylen = "\002\000\
\001\000\003\000\002\000\001\000\002\000\002\000\002\000\002\000\
\001\000\003\000\001\000\001\000\003\000\001\000\001\000\001\000\
\003\000\001\000\003\000\001\000\000\000\001\000\001\000\003\000\
\003\000\001\000\003\000\003\000\001\000\003\000\001\000\001\000\
\006\000\004\000\006\000\006\000\006\000\006\000\008\000\001\000\
\003\000\002\000\002\000\002\000\002\000\002\000\001\000\003\000\
\003\000\001\000\001\000\001\000\007\000\001\000\001\000\001\000\
\003\000\004\000\001\000\001\000\003\000\007\000\000\000\001\000\
\001\000\003\000\003\000\001\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\051\000\052\000\000\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\056\000\050\000\001\000\000\000\
\000\000\000\000\071\000\000\000\004\000\029\000\000\000\000\000\
\000\000\003\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\005\000\000\000\068\000\000\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\012\000\
\014\000\016\000\018\000\015\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\070\000\007\000\008\000\
\000\000\057\000\000\000\000\000\049\000\000\000\002\000\019\000\
\027\000\028\000\000\000\000\000\034\000\000\000\000\000\000\000\
\000\000\026\000\000\000\022\000\000\000\000\000\000\000\058\000\
\000\000\000\000\000\000\000\000\067\000\066\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\
\010\000\013\000\030\000\000\000\000\000\000\000\000\000\033\000\
\000\000\061\000\035\000\036\000\025\000\024\000\037\000\038\000\
\000\000\000\000\000\000\000\000\053\000\000\000\039\000\000\000\
\000\000"

let yydgoto = "\002\000\
\027\000\028\000\029\000\053\000\050\000\106\000\081\000\082\000\
\107\000\030\000\031\000\108\000\109\000\032\000\033\000\101\000\
\060\000\056\000\102\000\057\000\058\000"

let yysindex = "\012\000\
\001\000\000\000\001\255\022\002\000\000\000\000\022\002\000\000\
\145\002\232\254\214\254\233\254\145\002\005\255\145\002\145\002\
\145\002\245\254\244\254\000\000\000\000\000\000\000\000\071\002\
\022\002\009\255\000\000\234\254\000\000\000\000\036\255\249\254\
\145\002\000\000\000\000\040\255\030\255\138\002\006\255\007\255\
\229\001\016\255\018\255\249\254\020\255\249\254\249\254\249\254\
\229\001\000\000\229\001\022\002\000\000\014\255\000\000\010\255\
\000\000\021\255\008\255\011\255\027\255\001\000\229\001\239\254\
\249\254\022\002\023\255\249\254\022\002\022\002\000\000\000\000\
\000\000\000\000\000\000\000\000\199\255\229\001\199\255\022\255\
\000\000\034\255\229\001\229\001\229\001\000\000\000\000\000\000\
\022\002\000\000\071\002\022\002\000\000\022\002\000\000\000\000\
\000\000\000\000\072\255\054\255\000\000\019\255\076\255\077\255\
\050\255\000\000\037\255\000\000\052\255\038\255\047\255\000\000\
\229\001\053\255\056\255\057\255\000\000\000\000\000\000\055\255\
\022\002\059\255\023\255\022\002\022\002\229\001\000\000\199\255\
\000\000\000\000\000\000\022\002\022\002\022\002\105\255\000\000\
\080\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\092\255\229\001\060\255\022\002\000\000\066\255\000\000\107\002\
\145\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\255\185\001\000\000\000\000\000\000\000\000\063\255\
\000\000\000\000\000\000\000\000\000\000\000\000\188\255\032\000\
\017\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\090\000\000\000\148\000\206\000\008\001\
\000\000\000\000\000\000\000\000\000\000\193\001\000\000\000\000\
\000\000\064\255\058\255\000\000\000\000\000\000\000\000\000\000\
\066\001\000\000\000\000\124\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\255\000\000\069\255\000\000\
\000\000\130\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\255\000\000\000\000\
\000\000\000\000\000\000\000\000\222\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\255"

let yygindex = "\000\000\
\052\000\000\000\252\255\000\000\000\000\222\255\002\000\000\000\
\037\000\000\000\000\000\253\255\000\000\249\255\230\255\004\000\
\039\000\000\000\000\000\042\000\000\000"

let yytablesize = 971
let yytable = "\036\000\
\023\000\038\000\037\000\039\000\042\000\044\000\080\000\046\000\
\047\000\048\000\097\000\098\000\001\000\041\000\086\000\023\000\
\087\000\062\000\062\000\055\000\059\000\032\000\032\000\062\000\
\023\000\065\000\051\000\032\000\096\000\062\000\068\000\034\000\
\045\000\032\000\052\000\049\000\061\000\063\000\064\000\062\000\
\067\000\040\000\043\000\110\000\066\000\060\000\060\000\088\000\
\114\000\115\000\116\000\060\000\069\000\070\000\083\000\062\000\
\084\000\060\000\085\000\032\000\089\000\099\000\062\000\091\000\
\103\000\104\000\032\000\113\000\090\000\092\000\093\000\062\000\
\062\000\094\000\062\000\032\000\032\000\121\000\032\000\062\000\
\100\000\122\000\112\000\060\000\117\000\123\000\055\000\059\000\
\126\000\120\000\060\000\141\000\124\000\125\000\128\000\127\000\
\130\000\129\000\132\000\060\000\060\000\133\000\060\000\134\000\
\135\000\137\000\146\000\147\000\148\000\150\000\152\000\149\000\
\069\000\095\000\131\000\111\000\136\000\047\000\021\000\139\000\
\140\000\063\000\065\000\021\000\142\000\153\000\138\000\143\000\
\144\000\145\000\119\000\031\000\118\000\000\000\031\000\031\000\
\031\000\031\000\000\000\000\000\031\000\031\000\000\000\151\000\
\000\000\065\000\031\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\031\000\031\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\031\000\
\031\000\000\000\000\000\031\000\000\000\031\000\000\000\000\000\
\031\000\000\000\000\000\031\000\031\000\031\000\031\000\031\000\
\020\000\020\000\020\000\020\000\031\000\000\000\020\000\020\000\
\000\000\071\000\000\000\000\000\020\000\020\000\000\000\072\000\
\000\000\000\000\000\000\073\000\000\000\074\000\000\000\020\000\
\020\000\020\000\020\000\000\000\000\000\000\000\000\000\000\000\
\075\000\076\000\105\000\000\000\000\000\000\000\020\000\000\000\
\000\000\020\000\000\000\000\000\000\000\020\000\000\000\020\000\
\000\000\000\000\020\000\000\000\000\000\020\000\020\000\020\000\
\000\000\020\000\077\000\000\000\000\000\078\000\020\000\000\000\
\079\000\003\000\000\000\000\000\004\000\000\000\000\000\005\000\
\006\000\000\000\007\000\000\000\008\000\000\000\009\000\000\000\
\010\000\000\000\011\000\012\000\013\000\014\000\000\000\015\000\
\016\000\017\000\000\000\018\000\019\000\020\000\021\000\022\000\
\000\000\000\000\000\000\000\000\040\000\040\000\040\000\040\000\
\000\000\000\000\040\000\040\000\000\000\000\000\000\000\000\000\
\040\000\040\000\000\000\000\000\024\000\000\000\000\000\025\000\
\000\000\000\000\026\000\040\000\040\000\040\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\000\000\040\000\000\000\000\000\040\000\000\000\
\000\000\040\000\040\000\040\000\000\000\040\000\043\000\043\000\
\043\000\043\000\040\000\000\000\043\000\043\000\000\000\000\000\
\000\000\000\000\043\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\043\000\043\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\043\000\000\000\000\000\
\043\000\000\000\000\000\043\000\043\000\043\000\000\000\043\000\
\044\000\044\000\044\000\044\000\043\000\000\000\044\000\044\000\
\000\000\000\000\000\000\000\000\044\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\000\000\044\000\
\000\000\000\000\044\000\000\000\000\000\044\000\044\000\044\000\
\000\000\044\000\045\000\045\000\045\000\045\000\044\000\000\000\
\045\000\045\000\000\000\000\000\000\000\000\000\045\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\045\000\045\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\045\000\000\000\000\000\045\000\000\000\000\000\045\000\
\045\000\045\000\000\000\045\000\046\000\046\000\046\000\046\000\
\045\000\000\000\046\000\046\000\000\000\000\000\000\000\000\000\
\046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\046\000\000\000\000\000\046\000\000\000\
\000\000\046\000\046\000\046\000\000\000\046\000\042\000\042\000\
\042\000\042\000\046\000\000\000\042\000\042\000\000\000\000\000\
\000\000\000\000\042\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\000\000\042\000\000\000\000\000\
\042\000\000\000\000\000\042\000\042\000\042\000\000\000\042\000\
\041\000\041\000\041\000\041\000\042\000\000\000\041\000\041\000\
\000\000\000\000\000\000\000\000\041\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\041\000\041\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\041\000\
\000\000\000\000\041\000\000\000\000\000\041\000\041\000\041\000\
\000\000\041\000\055\000\000\000\000\000\000\000\041\000\055\000\
\055\000\000\000\055\000\000\000\055\000\000\000\000\000\055\000\
\055\000\000\000\055\000\000\000\055\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\055\000\055\000\055\000\055\000\
\000\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\071\000\
\000\000\000\000\000\000\055\000\055\000\072\000\055\000\055\000\
\000\000\073\000\055\000\074\000\055\000\000\000\055\000\055\000\
\000\000\000\000\055\000\055\000\000\000\000\000\075\000\076\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\000\004\000\000\000\078\000\005\000\006\000\079\000\007\000\
\000\000\008\000\000\000\009\000\000\000\010\000\000\000\011\000\
\012\000\013\000\014\000\000\000\015\000\016\000\017\000\000\000\
\000\000\035\000\020\000\021\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\004\000\000\000\025\000\005\000\006\000\026\000\
\007\000\000\000\008\000\000\000\009\000\000\000\010\000\000\000\
\011\000\012\000\013\000\014\000\000\000\015\000\016\000\017\000\
\000\000\000\000\054\000\020\000\021\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\006\000\000\000\000\000\000\000\008\000\000\000\
\009\000\000\000\024\000\000\000\011\000\025\000\013\000\000\000\
\026\000\015\000\016\000\017\000\000\000\000\000\035\000\020\000\
\021\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\006\000\000\000\000\000\000\000\008\000\000\000\005\000\
\006\000\000\000\000\000\011\000\008\000\000\000\024\000\000\000\
\000\000\025\000\011\000\000\000\026\000\035\000\020\000\021\000\
\022\000\000\000\000\000\000\000\035\000\020\000\021\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\
\025\000\000\000\000\000\026\000\024\000\000\000\000\000\025\000\
\000\000\000\000\026\000"

let yycheck = "\004\000\
\000\000\009\000\007\000\028\001\028\001\013\000\041\000\015\000\
\016\000\017\000\028\001\029\001\001\000\056\001\049\000\050\001\
\051\000\005\001\006\001\024\000\025\000\005\001\006\001\011\001\
\059\001\033\000\039\001\011\001\063\000\017\001\038\000\031\001\
\028\001\017\001\047\001\047\001\028\001\002\001\046\001\062\001\
\011\001\066\001\066\001\078\000\005\001\005\001\006\001\052\000\
\083\000\084\000\085\000\011\001\047\001\047\001\039\001\043\001\
\039\001\017\001\039\001\043\001\047\001\066\000\050\001\043\001\
\069\000\070\000\050\001\034\001\059\001\062\001\060\001\059\001\
\060\001\047\001\062\001\059\001\060\001\006\001\062\001\067\001\
\058\001\028\001\061\001\043\001\089\000\067\001\091\000\092\000\
\039\001\094\000\050\001\126\000\017\001\017\001\043\001\059\001\
\050\001\060\001\046\001\059\001\060\001\046\001\062\001\047\001\
\050\001\047\001\002\001\028\001\017\001\050\001\045\001\146\000\
\062\001\062\000\113\000\079\000\121\000\060\001\050\001\124\000\
\125\000\059\001\059\001\059\001\128\000\152\000\123\000\132\000\
\133\000\134\000\092\000\002\001\091\000\255\255\005\001\006\001\
\007\001\008\001\255\255\255\255\011\001\012\001\255\255\148\000\
\255\255\153\000\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\043\001\255\255\255\255\046\001\
\047\001\255\255\255\255\050\001\255\255\052\001\255\255\255\255\
\055\001\255\255\255\255\058\001\059\001\060\001\061\001\062\001\
\005\001\006\001\007\001\008\001\067\001\255\255\011\001\012\001\
\255\255\003\001\255\255\255\255\017\001\018\001\255\255\009\001\
\255\255\255\255\255\255\013\001\255\255\015\001\255\255\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\028\001\255\255\255\255\255\255\043\001\255\255\
\255\255\046\001\255\255\255\255\255\255\050\001\255\255\052\001\
\255\255\255\255\055\001\255\255\255\255\058\001\059\001\060\001\
\255\255\062\001\052\001\255\255\255\255\055\001\067\001\255\255\
\058\001\001\001\255\255\255\255\004\001\255\255\255\255\007\001\
\008\001\255\255\010\001\255\255\012\001\255\255\014\001\255\255\
\016\001\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\255\255\
\017\001\018\001\255\255\255\255\052\001\255\255\255\255\055\001\
\255\255\255\255\058\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\255\255\052\001\255\255\255\255\055\001\255\255\
\255\255\058\001\059\001\060\001\255\255\062\001\005\001\006\001\
\007\001\008\001\067\001\255\255\011\001\012\001\255\255\255\255\
\255\255\255\255\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\052\001\255\255\255\255\
\055\001\255\255\255\255\058\001\059\001\060\001\255\255\062\001\
\005\001\006\001\007\001\008\001\067\001\255\255\011\001\012\001\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\255\255\
\255\255\255\255\255\255\255\255\255\255\050\001\255\255\052\001\
\255\255\255\255\055\001\255\255\255\255\058\001\059\001\060\001\
\255\255\062\001\005\001\006\001\007\001\008\001\067\001\255\255\
\011\001\012\001\255\255\255\255\255\255\255\255\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\050\001\
\255\255\052\001\255\255\255\255\055\001\255\255\255\255\058\001\
\059\001\060\001\255\255\062\001\005\001\006\001\007\001\008\001\
\067\001\255\255\011\001\012\001\255\255\255\255\255\255\255\255\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\255\255\052\001\255\255\255\255\055\001\255\255\
\255\255\058\001\059\001\060\001\255\255\062\001\005\001\006\001\
\007\001\008\001\067\001\255\255\011\001\012\001\255\255\255\255\
\255\255\255\255\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\052\001\255\255\255\255\
\055\001\255\255\255\255\058\001\059\001\060\001\255\255\062\001\
\005\001\006\001\007\001\008\001\067\001\255\255\011\001\012\001\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\255\255\
\255\255\255\255\255\255\255\255\255\255\050\001\255\255\052\001\
\255\255\255\255\055\001\255\255\255\255\058\001\059\001\060\001\
\255\255\062\001\002\001\255\255\255\255\255\255\067\001\007\001\
\008\001\255\255\002\001\255\255\012\001\255\255\255\255\007\001\
\008\001\255\255\018\001\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\046\001\003\001\
\255\255\255\255\255\255\043\001\052\001\009\001\046\001\055\001\
\255\255\013\001\058\001\015\001\052\001\255\255\062\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\004\001\255\255\055\001\007\001\008\001\058\001\010\001\
\255\255\012\001\255\255\014\001\255\255\016\001\255\255\018\001\
\019\001\020\001\021\001\255\255\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\004\001\255\255\055\001\007\001\008\001\058\001\
\010\001\255\255\012\001\255\255\014\001\255\255\016\001\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\255\255\255\255\028\001\029\001\030\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\007\001\008\001\255\255\255\255\255\255\012\001\255\255\
\014\001\255\255\052\001\255\255\018\001\055\001\020\001\255\255\
\058\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\255\255\012\001\255\255\007\001\
\008\001\255\255\255\255\018\001\012\001\255\255\052\001\255\255\
\255\255\055\001\018\001\255\255\058\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\255\255\255\255\255\255\255\255\255\255\052\001\255\255\255\255\
\055\001\255\255\255\255\058\001\052\001\255\255\255\255\055\001\
\255\255\255\255\058\001"

let yynames_const = "\
  "

let yynames_block = "\
  IMPORT\000\
  AS\000\
  USTRING\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  CASE\000\
  OF\000\
  UNIT\000\
  UUNIT\000\
  TIMESFLOAT\000\
  UFLOAT\000\
  LET\000\
  IN\000\
  INERT\000\
  LAMBDA\000\
  FIX\000\
  LETREC\000\
  TYPE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  NAT\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 125 "parser.mly"
      ( fun ctx -> [],ctx )
# 581 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 127 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 593 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 134 "parser.mly"
                   ( fun ctx -> (Import(_2.v)),ctx )
# 601 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 136 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 608 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 138 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 616 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 140 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 624 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 145 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 632 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 147 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 640 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 152 "parser.mly"
                ( _1 )
# 647 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 157 "parser.mly"
           ( _2 )
# 656 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 159 "parser.mly"
      ( fun ctx -> TyString )
# 663 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 161 "parser.mly"
      ( fun ctx -> TyBool )
# 670 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 163 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 680 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 166 "parser.mly"
      ( fun ctx -> TyUnit )
# 687 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 168 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 698 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 174 "parser.mly"
      ( fun ctx -> TyFloat )
# 705 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 176 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 715 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 179 "parser.mly"
      ( fun ctx -> TyNat )
# 722 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 183 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 731 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 185 "parser.mly"
      ( _1 )
# 738 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "parser.mly"
      ( fun ctx i -> [] )
# 744 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 191 "parser.mly"
      ( _1 )
# 751 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 195 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 758 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 197 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 767 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 201 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 776 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 203 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 783 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 207 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 793 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 210 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 803 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 213 "parser.mly"
      ( _1 )
# 810 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 219 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 819 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 221 "parser.mly"
            ( _1 )
# 826 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 225 "parser.mly"
      ( _1 )
# 833 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 227 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 845 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 229 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 856 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 232 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 868 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 234 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 880 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 236 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 894 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 240 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 908 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 244 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 925 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 251 "parser.mly"
      ( _1 )
# 932 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 253 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 941 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 255 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 952 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 260 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 961 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 263 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 969 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 265 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 977 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 267 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 985 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 271 "parser.mly"
      ( _1 )
# 992 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 273 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1002 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 279 "parser.mly"
      ( _2 )
# 1011 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 281 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1018 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 283 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1025 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 285 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1032 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 287 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1046 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 290 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1053 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 292 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1061 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 295 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1068 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 297 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1078 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 300 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1088 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 302 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1099 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 310 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1106 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 312 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1115 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 316 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1130 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    Obj.repr(
# 322 "parser.mly"
      ( fun ctx i -> [] )
# 1136 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 324 "parser.mly"
      ( _1 )
# 1143 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 328 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1150 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 330 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1159 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 334 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1168 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 336 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1175 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    Obj.repr(
# 340 "parser.mly"
      ( fun ctx -> TyVarBind )
# 1181 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 342 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 1189 "parser.ml"
               : 'TyBinder))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
